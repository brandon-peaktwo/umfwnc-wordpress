// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'fonts/', $path);
}

/// Returns a value for a given breakpoint
@function breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    @return map-get($breakpoints, $breakpoint);
  }

  @warn 'Invalid breakpoint: #{$breakpoint}.';
  @return null;
}

/// Returns a width for a given breakpoint
/// width($value)
@function width($width) {
  @if map-has-key($widths, $width) {
    // Get the width value.
    @return map-get($widths, $width);
  }

  @warn 'Invalid width: #{$width}.';
  @return null;
}
